### YamlMime:ManagedReference
items:
- uid: ParseCommon.Utilities
  commentId: T:ParseCommon.Utilities
  id: Utilities
  parent: ParseCommon
  children:
  - ParseCommon.Utilities.AdjustTechHref(System.String)
  - ParseCommon.Utilities.CreateExcelFromData(System.String,System.Collections.Generic.List{System.String},System.String@)
  - ParseCommon.Utilities.CreateExecutionId(System.String)
  - ParseCommon.Utilities.GetFileDirectory(System.String)
  - ParseCommon.Utilities.GetLastChar(System.String)
  - ParseCommon.Utilities.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)
  - ParseCommon.Utilities.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  - ParseCommon.Utilities.ParseXml``1(System.String)
  - ParseCommon.Utilities.SerializeXml``1(``0)
  - ParseCommon.Utilities.SubArray``1(``0[],System.Int32,System.Int32)
  - ParseCommon.Utilities.TryClickLink(OpenQA.Selenium.IWebElement)
  - ParseCommon.Utilities.TryFindElement(OpenQA.Selenium.ISearchContext,OpenQA.Selenium.By)
  - ParseCommon.Utilities.TryFindElements(OpenQA.Selenium.ISearchContext,OpenQA.Selenium.By)
  - ParseCommon.Utilities.TryGetAttribute(OpenQA.Selenium.IWebElement,System.String)
  - ParseCommon.Utilities.TryGetHref(OpenQA.Selenium.IWebElement)
  langs:
  - csharp
  - vb
  name: Utilities
  nameWithType: Utilities
  fullName: ParseCommon.Utilities
  type: Class
  source:
    id: Utilities
    path: E:\Test\CATS\ParsePages\ParseCommon\Utilities.cs
    startLine: 13
  assemblies:
  - ParseCommon
  namespace: ParseCommon
  syntax:
    content: public static class Utilities
    content.vb: Public Module Utilities
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: ParseCommon.Utilities.GetFileDirectory(System.String)
  commentId: M:ParseCommon.Utilities.GetFileDirectory(System.String)
  id: GetFileDirectory(System.String)
  parent: ParseCommon.Utilities
  langs:
  - csharp
  - vb
  name: GetFileDirectory(String)
  nameWithType: Utilities.GetFileDirectory(String)
  fullName: ParseCommon.Utilities.GetFileDirectory(System.String)
  type: Method
  source:
    id: GetFileDirectory
    path: E:\Test\CATS\ParsePages\ParseCommon\Utilities.cs
    startLine: 20
  assemblies:
  - ParseCommon
  namespace: ParseCommon
  summary: "\nGet file directory, create the file directory if it does not exist\n"
  example: []
  syntax:
    content: public static string GetFileDirectory(string filePath)
    content.vb: Public Shared Function GetFileDirectory(filePath As String) As String
    parameters:
    - id: filePath
      type: System.String
      description: File path
    return:
      type: System.String
      description: Return filepath
  overload: ParseCommon.Utilities.GetFileDirectory*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: ParseCommon.Utilities.ParseXml``1(System.String)
  commentId: M:ParseCommon.Utilities.ParseXml``1(System.String)
  id: ParseXml``1(System.String)
  isExtensionMethod: true
  parent: ParseCommon.Utilities
  langs:
  - csharp
  - vb
  name: ParseXml<T>(String)
  nameWithType: Utilities.ParseXml<T>(String)
  fullName: ParseCommon.Utilities.ParseXml<T>(System.String)
  type: Method
  source:
    id: ParseXml
    path: E:\Test\CATS\ParsePages\ParseCommon\Utilities.cs
    startLine: 38
  assemblies:
  - ParseCommon
  namespace: ParseCommon
  summary: "\nDeserialize string to Xml structure\n"
  example: []
  syntax:
    content: 'public static T ParseXml<T>(this string this)where T : class'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ParseXml(Of T As Class)(this As String) As T
    parameters:
    - id: this
      type: System.String
      description: String that need to be deserialized
    typeParameters:
    - id: T
      description: Generics type T
    return:
      type: '{T}'
      description: Return Xml structure
  overload: ParseCommon.Utilities.ParseXml*
  nameWithType.vb: Utilities.ParseXml(Of T)(String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ParseCommon.Utilities.ParseXml(Of T)(System.String)
  name.vb: ParseXml(Of T)(String)
- uid: ParseCommon.Utilities.SerializeXml``1(``0)
  commentId: M:ParseCommon.Utilities.SerializeXml``1(``0)
  id: SerializeXml``1(``0)
  isExtensionMethod: true
  parent: ParseCommon.Utilities
  langs:
  - csharp
  - vb
  name: SerializeXml<T>(T)
  nameWithType: Utilities.SerializeXml<T>(T)
  fullName: ParseCommon.Utilities.SerializeXml<T>(T)
  type: Method
  source:
    id: SerializeXml
    path: E:\Test\CATS\ParsePages\ParseCommon\Utilities.cs
    startLine: 51
  assemblies:
  - ParseCommon
  namespace: ParseCommon
  summary: "\nSerialize Xml to string\n"
  example: []
  syntax:
    content: public static string SerializeXml<T>(this T value)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SerializeXml(Of T)(value As T) As String
    parameters:
    - id: value
      type: '{T}'
      description: Xml structure
    typeParameters:
    - id: T
      description: Generics type T
    return:
      type: System.String
      description: Return serialized string
  overload: ParseCommon.Utilities.SerializeXml*
  nameWithType.vb: Utilities.SerializeXml(Of T)(T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ParseCommon.Utilities.SerializeXml(Of T)(T)
  name.vb: SerializeXml(Of T)(T)
- uid: ParseCommon.Utilities.TryFindElement(OpenQA.Selenium.ISearchContext,OpenQA.Selenium.By)
  commentId: M:ParseCommon.Utilities.TryFindElement(OpenQA.Selenium.ISearchContext,OpenQA.Selenium.By)
  id: TryFindElement(OpenQA.Selenium.ISearchContext,OpenQA.Selenium.By)
  isExtensionMethod: true
  parent: ParseCommon.Utilities
  langs:
  - csharp
  - vb
  name: TryFindElement(ISearchContext, By)
  nameWithType: Utilities.TryFindElement(ISearchContext, By)
  fullName: ParseCommon.Utilities.TryFindElement(OpenQA.Selenium.ISearchContext, OpenQA.Selenium.By)
  type: Method
  source:
    id: TryFindElement
    path: E:\Test\CATS\ParsePages\ParseCommon\Utilities.cs
    startLine: 72
  assemblies:
  - ParseCommon
  namespace: ParseCommon
  syntax:
    content: public static IWebElement TryFindElement(this ISearchContext c, By selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TryFindElement(c As ISearchContext, selector As By) As IWebElement
    parameters:
    - id: c
      type: OpenQA.Selenium.ISearchContext
    - id: selector
      type: OpenQA.Selenium.By
    return:
      type: OpenQA.Selenium.IWebElement
  overload: ParseCommon.Utilities.TryFindElement*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: ParseCommon.Utilities.TryFindElements(OpenQA.Selenium.ISearchContext,OpenQA.Selenium.By)
  commentId: M:ParseCommon.Utilities.TryFindElements(OpenQA.Selenium.ISearchContext,OpenQA.Selenium.By)
  id: TryFindElements(OpenQA.Selenium.ISearchContext,OpenQA.Selenium.By)
  isExtensionMethod: true
  parent: ParseCommon.Utilities
  langs:
  - csharp
  - vb
  name: TryFindElements(ISearchContext, By)
  nameWithType: Utilities.TryFindElements(ISearchContext, By)
  fullName: ParseCommon.Utilities.TryFindElements(OpenQA.Selenium.ISearchContext, OpenQA.Selenium.By)
  type: Method
  source:
    id: TryFindElements
    path: E:\Test\CATS\ParsePages\ParseCommon\Utilities.cs
    startLine: 85
  assemblies:
  - ParseCommon
  namespace: ParseCommon
  syntax:
    content: public static ReadOnlyCollection<IWebElement> TryFindElements(this ISearchContext c, By selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TryFindElements(c As ISearchContext, selector As By) As ReadOnlyCollection(Of IWebElement)
    parameters:
    - id: c
      type: OpenQA.Selenium.ISearchContext
    - id: selector
      type: OpenQA.Selenium.By
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{OpenQA.Selenium.IWebElement}
  overload: ParseCommon.Utilities.TryFindElements*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: ParseCommon.Utilities.TryGetHref(OpenQA.Selenium.IWebElement)
  commentId: M:ParseCommon.Utilities.TryGetHref(OpenQA.Selenium.IWebElement)
  id: TryGetHref(OpenQA.Selenium.IWebElement)
  isExtensionMethod: true
  parent: ParseCommon.Utilities
  langs:
  - csharp
  - vb
  name: TryGetHref(IWebElement)
  nameWithType: Utilities.TryGetHref(IWebElement)
  fullName: ParseCommon.Utilities.TryGetHref(OpenQA.Selenium.IWebElement)
  type: Method
  source:
    id: TryGetHref
    path: E:\Test\CATS\ParsePages\ParseCommon\Utilities.cs
    startLine: 98
  assemblies:
  - ParseCommon
  namespace: ParseCommon
  syntax:
    content: public static string TryGetHref(this IWebElement e)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TryGetHref(e As IWebElement) As String
    parameters:
    - id: e
      type: OpenQA.Selenium.IWebElement
    return:
      type: System.String
  overload: ParseCommon.Utilities.TryGetHref*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: ParseCommon.Utilities.TryGetAttribute(OpenQA.Selenium.IWebElement,System.String)
  commentId: M:ParseCommon.Utilities.TryGetAttribute(OpenQA.Selenium.IWebElement,System.String)
  id: TryGetAttribute(OpenQA.Selenium.IWebElement,System.String)
  isExtensionMethod: true
  parent: ParseCommon.Utilities
  langs:
  - csharp
  - vb
  name: TryGetAttribute(IWebElement, String)
  nameWithType: Utilities.TryGetAttribute(IWebElement, String)
  fullName: ParseCommon.Utilities.TryGetAttribute(OpenQA.Selenium.IWebElement, System.String)
  type: Method
  source:
    id: TryGetAttribute
    path: E:\Test\CATS\ParsePages\ParseCommon\Utilities.cs
    startLine: 114
  assemblies:
  - ParseCommon
  namespace: ParseCommon
  syntax:
    content: public static string TryGetAttribute(this IWebElement e, string atrName)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TryGetAttribute(e As IWebElement, atrName As String) As String
    parameters:
    - id: e
      type: OpenQA.Selenium.IWebElement
    - id: atrName
      type: System.String
    return:
      type: System.String
  overload: ParseCommon.Utilities.TryGetAttribute*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: ParseCommon.Utilities.TryClickLink(OpenQA.Selenium.IWebElement)
  commentId: M:ParseCommon.Utilities.TryClickLink(OpenQA.Selenium.IWebElement)
  id: TryClickLink(OpenQA.Selenium.IWebElement)
  isExtensionMethod: true
  parent: ParseCommon.Utilities
  langs:
  - csharp
  - vb
  name: TryClickLink(IWebElement)
  nameWithType: Utilities.TryClickLink(IWebElement)
  fullName: ParseCommon.Utilities.TryClickLink(OpenQA.Selenium.IWebElement)
  type: Method
  source:
    id: TryClickLink
    path: E:\Test\CATS\ParsePages\ParseCommon\Utilities.cs
    startLine: 130
  assemblies:
  - ParseCommon
  namespace: ParseCommon
  syntax:
    content: public static bool TryClickLink(this IWebElement e)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TryClickLink(e As IWebElement) As Boolean
    parameters:
    - id: e
      type: OpenQA.Selenium.IWebElement
    return:
      type: System.Boolean
  overload: ParseCommon.Utilities.TryClickLink*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: ParseCommon.Utilities.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)
  commentId: M:ParseCommon.Utilities.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)
  id: IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)
  isExtensionMethod: true
  parent: ParseCommon.Utilities
  langs:
  - csharp
  - vb
  name: IndexOf<T>(IEnumerable<T>, T)
  nameWithType: Utilities.IndexOf<T>(IEnumerable<T>, T)
  fullName: ParseCommon.Utilities.IndexOf<T>(System.Collections.Generic.IEnumerable<T>, T)
  type: Method
  source:
    id: IndexOf
    path: E:\Test\CATS\ParsePages\ParseCommon\Utilities.cs
    startLine: 143
  assemblies:
  - ParseCommon
  namespace: ParseCommon
  syntax:
    content: public static int IndexOf<T>(this IEnumerable<T> obj, T value)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IndexOf(Of T)(obj As IEnumerable(Of T), value As T) As Integer
    parameters:
    - id: obj
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: value
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.Int32
  overload: ParseCommon.Utilities.IndexOf*
  nameWithType.vb: Utilities.IndexOf(Of T)(IEnumerable(Of T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ParseCommon.Utilities.IndexOf(Of T)(System.Collections.Generic.IEnumerable(Of T), T)
  name.vb: IndexOf(Of T)(IEnumerable(Of T), T)
- uid: ParseCommon.Utilities.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:ParseCommon.Utilities.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  id: IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: ParseCommon.Utilities
  langs:
  - csharp
  - vb
  name: IndexOf<T>(IEnumerable<T>, T, IEqualityComparer<T>)
  nameWithType: Utilities.IndexOf<T>(IEnumerable<T>, T, IEqualityComparer<T>)
  fullName: ParseCommon.Utilities.IndexOf<T>(System.Collections.Generic.IEnumerable<T>, T, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    id: IndexOf
    path: E:\Test\CATS\ParsePages\ParseCommon\Utilities.cs
    startLine: 148
  assemblies:
  - ParseCommon
  namespace: ParseCommon
  syntax:
    content: public static int IndexOf<T>(this IEnumerable<T> obj, T value, IEqualityComparer<T> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IndexOf(Of T)(obj As IEnumerable(Of T), value As T, comparer As IEqualityComparer(Of T)) As Integer
    parameters:
    - id: obj
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: value
      type: '{T}'
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Int32
  overload: ParseCommon.Utilities.IndexOf*
  nameWithType.vb: Utilities.IndexOf(Of T)(IEnumerable(Of T), T, IEqualityComparer(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ParseCommon.Utilities.IndexOf(Of T)(System.Collections.Generic.IEnumerable(Of T), T, System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IndexOf(Of T)(IEnumerable(Of T), T, IEqualityComparer(Of T))
- uid: ParseCommon.Utilities.AdjustTechHref(System.String)
  commentId: M:ParseCommon.Utilities.AdjustTechHref(System.String)
  id: AdjustTechHref(System.String)
  isExtensionMethod: true
  parent: ParseCommon.Utilities
  langs:
  - csharp
  - vb
  name: AdjustTechHref(String)
  nameWithType: Utilities.AdjustTechHref(String)
  fullName: ParseCommon.Utilities.AdjustTechHref(System.String)
  type: Method
  source:
    id: AdjustTechHref
    path: E:\Test\CATS\ParsePages\ParseCommon\Utilities.cs
    startLine: 157
  assemblies:
  - ParseCommon
  namespace: ParseCommon
  syntax:
    content: public static string AdjustTechHref(this string url)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AdjustTechHref(url As String) As String
    parameters:
    - id: url
      type: System.String
    return:
      type: System.String
  overload: ParseCommon.Utilities.AdjustTechHref*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: ParseCommon.Utilities.SubArray``1(``0[],System.Int32,System.Int32)
  commentId: M:ParseCommon.Utilities.SubArray``1(``0[],System.Int32,System.Int32)
  id: SubArray``1(``0[],System.Int32,System.Int32)
  isExtensionMethod: true
  parent: ParseCommon.Utilities
  langs:
  - csharp
  - vb
  name: SubArray<T>(T[], Int32, Int32)
  nameWithType: Utilities.SubArray<T>(T[], Int32, Int32)
  fullName: ParseCommon.Utilities.SubArray<T>(T[], System.Int32, System.Int32)
  type: Method
  source:
    id: SubArray
    path: E:\Test\CATS\ParsePages\ParseCommon\Utilities.cs
    startLine: 162
  assemblies:
  - ParseCommon
  namespace: ParseCommon
  syntax:
    content: public static T[] SubArray<T>(this T[] data, int index, int length)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SubArray(Of T)(data As T(), index As Integer, length As Integer) As T()
    parameters:
    - id: data
      type: '{T}[]'
    - id: index
      type: System.Int32
    - id: length
      type: System.Int32
    typeParameters:
    - id: T
    return:
      type: '{T}[]'
  overload: ParseCommon.Utilities.SubArray*
  nameWithType.vb: Utilities.SubArray(Of T)(T(), Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ParseCommon.Utilities.SubArray(Of T)(T(), System.Int32, System.Int32)
  name.vb: SubArray(Of T)(T(), Int32, Int32)
- uid: ParseCommon.Utilities.GetLastChar(System.String)
  commentId: M:ParseCommon.Utilities.GetLastChar(System.String)
  id: GetLastChar(System.String)
  isExtensionMethod: true
  parent: ParseCommon.Utilities
  langs:
  - csharp
  - vb
  name: GetLastChar(String)
  nameWithType: Utilities.GetLastChar(String)
  fullName: ParseCommon.Utilities.GetLastChar(System.String)
  type: Method
  source:
    id: GetLastChar
    path: E:\Test\CATS\ParsePages\ParseCommon\Utilities.cs
    startLine: 169
  assemblies:
  - ParseCommon
  namespace: ParseCommon
  syntax:
    content: public static string GetLastChar(this string inputStr)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetLastChar(inputStr As String) As String
    parameters:
    - id: inputStr
      type: System.String
    return:
      type: System.String
  overload: ParseCommon.Utilities.GetLastChar*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: ParseCommon.Utilities.CreateExecutionId(System.String)
  commentId: M:ParseCommon.Utilities.CreateExecutionId(System.String)
  id: CreateExecutionId(System.String)
  parent: ParseCommon.Utilities
  langs:
  - csharp
  - vb
  name: CreateExecutionId(String)
  nameWithType: Utilities.CreateExecutionId(String)
  fullName: ParseCommon.Utilities.CreateExecutionId(System.String)
  type: Method
  source:
    id: CreateExecutionId
    path: E:\Test\CATS\ParsePages\ParseCommon\Utilities.cs
    startLine: 174
  assemblies:
  - ParseCommon
  namespace: ParseCommon
  syntax:
    content: public static string CreateExecutionId(string queryRecord)
    content.vb: Public Shared Function CreateExecutionId(queryRecord As String) As String
    parameters:
    - id: queryRecord
      type: System.String
    return:
      type: System.String
  overload: ParseCommon.Utilities.CreateExecutionId*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: ParseCommon.Utilities.CreateExcelFromData(System.String,System.Collections.Generic.List{System.String},System.String@)
  commentId: M:ParseCommon.Utilities.CreateExcelFromData(System.String,System.Collections.Generic.List{System.String},System.String@)
  id: CreateExcelFromData(System.String,System.Collections.Generic.List{System.String},System.String@)
  parent: ParseCommon.Utilities
  langs:
  - csharp
  - vb
  name: CreateExcelFromData(String, List<String>, ref String)
  nameWithType: Utilities.CreateExcelFromData(String, List<String>, ref String)
  fullName: ParseCommon.Utilities.CreateExcelFromData(System.String, System.Collections.Generic.List<System.String>, ref System.String)
  type: Method
  source:
    id: CreateExcelFromData
    path: E:\Test\CATS\ParsePages\ParseCommon\Utilities.cs
    startLine: 193
  assemblies:
  - ParseCommon
  namespace: ParseCommon
  syntax:
    content: public static bool CreateExcelFromData(string outputFilePath, List<string> urlList, ref string errorInfo)
    content.vb: Public Shared Function CreateExcelFromData(outputFilePath As String, urlList As List(Of String), ByRef errorInfo As String) As Boolean
    parameters:
    - id: outputFilePath
      type: System.String
    - id: urlList
      type: System.Collections.Generic.List{System.String}
    - id: errorInfo
      type: System.String
    return:
      type: System.Boolean
  overload: ParseCommon.Utilities.CreateExcelFromData*
  nameWithType.vb: Utilities.CreateExcelFromData(String, List(Of String), ByRef String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ParseCommon.Utilities.CreateExcelFromData(System.String, System.Collections.Generic.List(Of System.String), ByRef System.String)
  name.vb: CreateExcelFromData(String, List(Of String), ByRef String)
references:
- uid: ParseCommon
  commentId: N:ParseCommon
  isExternal: false
  name: ParseCommon
  nameWithType: ParseCommon
  fullName: ParseCommon
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: ParseCommon.Utilities.GetFileDirectory*
  commentId: Overload:ParseCommon.Utilities.GetFileDirectory
  isExternal: false
  name: GetFileDirectory
  nameWithType: Utilities.GetFileDirectory
  fullName: ParseCommon.Utilities.GetFileDirectory
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: ParseCommon.Utilities.ParseXml*
  commentId: Overload:ParseCommon.Utilities.ParseXml
  isExternal: false
  name: ParseXml
  nameWithType: Utilities.ParseXml
  fullName: ParseCommon.Utilities.ParseXml
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: ParseCommon.Utilities.SerializeXml*
  commentId: Overload:ParseCommon.Utilities.SerializeXml
  isExternal: false
  name: SerializeXml
  nameWithType: Utilities.SerializeXml
  fullName: ParseCommon.Utilities.SerializeXml
- uid: ParseCommon.Utilities.TryFindElement*
  commentId: Overload:ParseCommon.Utilities.TryFindElement
  isExternal: false
  name: TryFindElement
  nameWithType: Utilities.TryFindElement
  fullName: ParseCommon.Utilities.TryFindElement
- uid: OpenQA.Selenium.ISearchContext
  commentId: T:OpenQA.Selenium.ISearchContext
  parent: OpenQA.Selenium
  isExternal: true
  name: ISearchContext
  nameWithType: ISearchContext
  fullName: OpenQA.Selenium.ISearchContext
- uid: OpenQA.Selenium.By
  commentId: T:OpenQA.Selenium.By
  parent: OpenQA.Selenium
  isExternal: true
  name: By
  nameWithType: By
  fullName: OpenQA.Selenium.By
- uid: OpenQA.Selenium.IWebElement
  commentId: T:OpenQA.Selenium.IWebElement
  parent: OpenQA.Selenium
  isExternal: true
  name: IWebElement
  nameWithType: IWebElement
  fullName: OpenQA.Selenium.IWebElement
- uid: OpenQA.Selenium
  commentId: N:OpenQA.Selenium
  isExternal: false
  name: OpenQA.Selenium
  nameWithType: OpenQA.Selenium
  fullName: OpenQA.Selenium
- uid: ParseCommon.Utilities.TryFindElements*
  commentId: Overload:ParseCommon.Utilities.TryFindElements
  isExternal: false
  name: TryFindElements
  nameWithType: Utilities.TryFindElements
  fullName: ParseCommon.Utilities.TryFindElements
- uid: System.Collections.ObjectModel.ReadOnlyCollection{OpenQA.Selenium.IWebElement}
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{OpenQA.Selenium.IWebElement}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<IWebElement>
  nameWithType: ReadOnlyCollection<IWebElement>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<OpenQA.Selenium.IWebElement>
  nameWithType.vb: ReadOnlyCollection(Of IWebElement)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of OpenQA.Selenium.IWebElement)
  name.vb: ReadOnlyCollection(Of IWebElement)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OpenQA.Selenium.IWebElement
    name: IWebElement
    nameWithType: IWebElement
    fullName: OpenQA.Selenium.IWebElement
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OpenQA.Selenium.IWebElement
    name: IWebElement
    nameWithType: IWebElement
    fullName: OpenQA.Selenium.IWebElement
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: true
  name: ReadOnlyCollection<T>
  nameWithType: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  nameWithType.vb: ReadOnlyCollection(Of T)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)
  name.vb: ReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: ParseCommon.Utilities.TryGetHref*
  commentId: Overload:ParseCommon.Utilities.TryGetHref
  isExternal: false
  name: TryGetHref
  nameWithType: Utilities.TryGetHref
  fullName: ParseCommon.Utilities.TryGetHref
- uid: ParseCommon.Utilities.TryGetAttribute*
  commentId: Overload:ParseCommon.Utilities.TryGetAttribute
  isExternal: false
  name: TryGetAttribute
  nameWithType: Utilities.TryGetAttribute
  fullName: ParseCommon.Utilities.TryGetAttribute
- uid: ParseCommon.Utilities.TryClickLink*
  commentId: Overload:ParseCommon.Utilities.TryClickLink
  isExternal: false
  name: TryClickLink
  nameWithType: Utilities.TryClickLink
  fullName: ParseCommon.Utilities.TryClickLink
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: ParseCommon.Utilities.IndexOf*
  commentId: Overload:ParseCommon.Utilities.IndexOf
  isExternal: false
  name: IndexOf
  nameWithType: Utilities.IndexOf
  fullName: ParseCommon.Utilities.IndexOf
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IEqualityComparer{{T}}
  commentId: T:System.Collections.Generic.IEqualityComparer{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer`1
  commentId: T:System.Collections.Generic.IEqualityComparer`1
  isExternal: true
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: ParseCommon.Utilities.AdjustTechHref*
  commentId: Overload:ParseCommon.Utilities.AdjustTechHref
  isExternal: false
  name: AdjustTechHref
  nameWithType: Utilities.AdjustTechHref
  fullName: ParseCommon.Utilities.AdjustTechHref
- uid: ParseCommon.Utilities.SubArray*
  commentId: Overload:ParseCommon.Utilities.SubArray
  isExternal: false
  name: SubArray
  nameWithType: Utilities.SubArray
  fullName: ParseCommon.Utilities.SubArray
- uid: '{T}[]'
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: ParseCommon.Utilities.GetLastChar*
  commentId: Overload:ParseCommon.Utilities.GetLastChar
  isExternal: false
  name: GetLastChar
  nameWithType: Utilities.GetLastChar
  fullName: ParseCommon.Utilities.GetLastChar
- uid: ParseCommon.Utilities.CreateExecutionId*
  commentId: Overload:ParseCommon.Utilities.CreateExecutionId
  isExternal: false
  name: CreateExecutionId
  nameWithType: Utilities.CreateExecutionId
  fullName: ParseCommon.Utilities.CreateExecutionId
- uid: ParseCommon.Utilities.CreateExcelFromData*
  commentId: Overload:ParseCommon.Utilities.CreateExcelFromData
  isExternal: false
  name: CreateExcelFromData
  nameWithType: Utilities.CreateExcelFromData
  fullName: ParseCommon.Utilities.CreateExcelFromData
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
